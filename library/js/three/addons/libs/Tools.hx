package js.three.addons.libs;@:native("")extern class Treeexamples{	/**	 * The Ease class provides a collection of easing functions for use with tween.js.	 */	static var Easing(default, null) : Readonly<{ var Linear : Readonly<EasingFunctionGroup & { None: EasingFunction; }>; var Quadratic : Readonly<EasingFunctionGroup>; var Cubic : Readonly<EasingFunctionGroup>; var Quartic : Readonly<EasingFunctionGroup>; var Quintic : Readonly<EasingFunctionGroup>; var Sinusoidal : Readonly<EasingFunctionGroup>; var Exponential : Readonly<EasingFunctionGroup>; var Circular : Readonly<EasingFunctionGroup>; var Elastic : Readonly<EasingFunctionGroup>; var Back : Readonly<EasingFunctionGroup>; var Bounce : Readonly<EasingFunctionGroup>; function generatePow(?power:Float) : EasingFunctionGroup; }>;	static var Interpolation(default, null) : { var Linear : Array<Float>->Float->Float; var Bezier : Array<Float>->Float->Float; var CatmullRom : Array<Float>->Float->Float; var Utils : { var Linear : Float->Float->Float->Float; var Bernstein : Float->Float->Float; var Factorial : Float->Float; var CatmullRom : Float->Float->Float->Float->Float->Float; }; };	static var VERSION(default, null) : Dynamic;	static var nextId(default, null) : typeof Sequence.nextId;	static var exports(default, null) : { var Easing : Readonly<{ var Linear : Readonly<EasingFunctionGroup & { None: EasingFunction; }>; var Quadratic : Readonly<EasingFunctionGroup>; var Cubic : Readonly<EasingFunctionGroup>; var Quartic : Readonly<EasingFunctionGroup>; var Quintic : Readonly<EasingFunctionGroup>; var Sinusoidal : Readonly<EasingFunctionGroup>; var Exponential : Readonly<EasingFunctionGroup>; var Circular : Readonly<EasingFunctionGroup>; var Elastic : Readonly<EasingFunctionGroup>; var Back : Readonly<EasingFunctionGroup>; var Bounce : Readonly<EasingFunctionGroup>; function generatePow(?power:Float) : EasingFunctionGroup; }>; var Group : typeof Group; var Interpolation : { var Linear : Array<Float>->Float->Float; var Bezier : Array<Float>->Float->Float; var CatmullRom : Array<Float>->Float->Float; var Utils : { var Linear : Float->Float->Float->Float; var Bernstein : Float->Float->Float; var Factorial : Float->Float; var CatmullRom : Float->Float->Float->Float->Float->Float; }; }; var now : Void->Float; var Sequence : typeof Sequence; var nextId : typeof Sequence.nextId; var Tween : typeof Tween; var VERSION : String; var getAll : Void->Array<Tween<UnknownProps>>; var removeAll : Void->Void; var add : Tween<UnknownProps>->Void; var remove : Tween<UnknownProps>->Void; var update : Float->Bool->Bool; };}